{"ast":null,"code":"var _jsxFileName = \"/Users/wildstyle/Documents/Dev/REACT/get_advise/src/App.js\",\n  _s = $RefreshSig$();\n//required when updating element inner values\nimport { useEffect, useState } from \"react\";\n\n//App js contains main function which generates html elemets programatically\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  //create a new state to update dom element inner values\n  //perameter \"adv\" is the value to be placed in dom element as value\n  //perameter \"setAdvice\" is what wraps the data to be used by \"adv\" perameter\n  //useState perameter is the default string\n  const [adv, setAdvice] = useState(\"\");\n  const [count, setCount] = useState(0);\n\n  //async function fetches api data in json format.\n  //async requires a function to return a promise -( Producing Code & Consuming Code)\n  async function getAdvise() {\n    //await requires a function to return a promise (Producing Code)\n    const response = await fetch('https://api.adviceslip.com/advice');\n    //await requires a function to return a promise (Consuming Code)\n    const rawData = await response.json();\n    //example filter: rawData.slip[\"advice\"]\n    //example filter: rawData['slip']['advice']\n    //example filter: rawData.slip.advice\n    //example filter: rawData.slip.id\n    //example filter: rawData['slip']['id']\n    //example filter: rawData.slip[\"id\"]\n\n    console.log(rawData.slip.advice);\n    setAdvice(rawData.slip.advice);\n    setCount(c => c + 1);\n  }\n  useEffect(fun);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: adv\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getAdvise,\n      children: \"Get Advise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You have read \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 30\n      }, this), \" pieces of advice.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"TNV0k/I4aSODbCcPf2HdcxemoO0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","adv","setAdvice","count","setCount","getAdvise","response","fetch","rawData","json","console","log","slip","advice","c","fun","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/wildstyle/Documents/Dev/REACT/get_advise/src/App.js"],"sourcesContent":["//required when updating element inner values\nimport {useEffect, useState} from \"react\";\n\n\n//App js contains main function which generates html elemets programatically\nexport default function App(){\n    //create a new state to update dom element inner values\n    //perameter \"adv\" is the value to be placed in dom element as value\n    //perameter \"setAdvice\" is what wraps the data to be used by \"adv\" perameter\n    //useState perameter is the default string\n    const [adv, setAdvice] = useState(\"\");\n    const [count, setCount] = useState(0);\n\n    //async function fetches api data in json format.\n    //async requires a function to return a promise -( Producing Code & Consuming Code)\n    async function getAdvise(){\n\n        //await requires a function to return a promise (Producing Code)\n        const response = await fetch('https://api.adviceslip.com/advice');\n        //await requires a function to return a promise (Consuming Code)\n        const rawData = await response.json();\n        //example filter: rawData.slip[\"advice\"]\n        //example filter: rawData['slip']['advice']\n        //example filter: rawData.slip.advice\n        //example filter: rawData.slip.id\n        //example filter: rawData['slip']['id']\n        //example filter: rawData.slip[\"id\"]\n\n        console.log(rawData.slip.advice);\n\n        setAdvice(rawData.slip.advice);\n        setCount((c) => c + 1);\n    }\n\n    useEffect(fun);\n\n    return (\n        <div>\n            <h1>{adv}</h1>\n            {/* add onClick perameter to button element */}\n            <button onClick={getAdvise}>Get Advise</button>\n            <p>You have read <strong>{count}</strong> pieces of advice.</p>\n        </div>\n    );\n}"],"mappings":";;AAAA;AACA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;;AAGzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAE;EAAAC,EAAA;EACzB;EACA;EACA;EACA;EACA,MAAM,CAACC,GAAG,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA;EACA,eAAeS,SAASA,CAAA,EAAE;IAEtB;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;IACjE;IACA,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACrC;IACA;IACA;IACA;IACA;IACA;;IAEAC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAACC,MAAM,CAAC;IAEhCX,SAAS,CAACM,OAAO,CAACI,IAAI,CAACC,MAAM,CAAC;IAC9BT,QAAQ,CAAEU,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC;EAC1B;EAEAnB,SAAS,CAACoB,GAAG,CAAC;EAEd,oBACIjB,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,EAAKf;IAAG;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEdtB,OAAA;MAAQuB,OAAO,EAAEhB,SAAU;MAAAW,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/CtB,OAAA;MAAAkB,QAAA,GAAG,gBAAc,eAAAlB,OAAA;QAAAkB,QAAA,EAASb;MAAK;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,sBAAkB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9D,CAAC;AAEd;AAACpB,EAAA,CAvCuBD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}