{"ast":null,"code":"var _jsxFileName = \"/Users/wildstyle/Documents/Dev/REACT/get_advise/src/App.js\",\n  _s = $RefreshSig$();\n//useState required when updating element inner values\n//useEffect required when to load default values into element on load.\nimport { useEffect, useState } from \"react\";\n\n//App component contains main function which generates html elemets programatically\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  //create a new state to update dom element inner values\n  //perameter \"adv\" is the value to be placed in dom element as value\n  //perameter \"setAdvice\" is what wraps the data to be used by \"adv\" perameter\n  //useState perameter is the default string\n  const [adv, setAdvice] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const rn = Math.floor(Math.random() * 1000);\n\n  //async function fetches api data in json format.\n  //async requires a function to return a promise -( Producing Code & Consuming Code)\n  async function getAdvice() {\n    //await requires a function to return a promise (Producing Code)\n    const response = await fetch('https://api.adviceslip.com/advice' + rn);\n    //await requires a function to return a promise (Consuming Code)\n    const rawData = await response.json();\n    //example filter: rawData.slip[\"advice\"]\n    //example filter: rawData['slip']['advice']\n    //example filter: rawData.slip.advice\n    //example filter: rawData.slip.id\n    //example filter: rawData['slip']['id']\n    //example filter: rawData.slip[\"id\"]\n\n    console.log(rawData.slip.advice);\n    setAdvice(rawData.slip.advice);\n    setCount(c => c + 1);\n  }\n\n  //put function into useEffect method with second argument as empty array.\n  useEffect(() => {\n    getAdvice();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: adv\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getAdvice,\n      children: \"Get Advise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      count: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n\n  //Message component handles messages to end user.\n  //props perameter is collected to utilize useState within function.\n  function Message(props) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You have read \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: props.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 30\n      }, this), \" pieces of advice.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s(App, \"TNV0k/I4aSODbCcPf2HdcxemoO0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","adv","setAdvice","count","setCount","rn","Math","floor","random","getAdvice","response","fetch","rawData","json","console","log","slip","advice","c","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Message","props","_c","$RefreshReg$"],"sources":["/Users/wildstyle/Documents/Dev/REACT/get_advise/src/App.js"],"sourcesContent":["//useState required when updating element inner values\n//useEffect required when to load default values into element on load.\nimport { useEffect, useState} from \"react\";\n\n\n//App component contains main function which generates html elemets programatically\nexport default function App(){\n    //create a new state to update dom element inner values\n    //perameter \"adv\" is the value to be placed in dom element as value\n    //perameter \"setAdvice\" is what wraps the data to be used by \"adv\" perameter\n    //useState perameter is the default string\n    const [adv, setAdvice] = useState(\"\");\n    const [count, setCount] = useState(0);\n    const rn = Math.floor(Math.random() * 1000);\n\n    //async function fetches api data in json format.\n    //async requires a function to return a promise -( Producing Code & Consuming Code)\n    async function getAdvice(){\n\n        //await requires a function to return a promise (Producing Code)\n        const response = await fetch('https://api.adviceslip.com/advice' + rn);\n        //await requires a function to return a promise (Consuming Code)\n        const rawData = await response.json();\n        //example filter: rawData.slip[\"advice\"]\n        //example filter: rawData['slip']['advice']\n        //example filter: rawData.slip.advice\n        //example filter: rawData.slip.id\n        //example filter: rawData['slip']['id']\n        //example filter: rawData.slip[\"id\"]\n\n        console.log(rawData.slip.advice);\n\n        setAdvice(rawData.slip.advice);\n        setCount((c) => c + 1);\n    }\n\n    //put function into useEffect method with second argument as empty array.\n    useEffect(() => {\n        getAdvice();\n    }, []);\n\n    return (\n        <div>\n            <h1>{adv}</h1>\n            {/* add onClick perameter to button element */}\n            <button onClick={getAdvice}>Get Advise</button>\n            {/*add 'Message' component tag function name with prop which is variable count value. */}\n            <Message count={count}/>\n        </div>\n    );\n    \n    //Message component handles messages to end user.\n    //props perameter is collected to utilize useState within function.\n    function Message(props){\n        return (\n            <p>You have read <strong>{props.count}</strong> pieces of advice.</p>\n        );\n    }\n}"],"mappings":";;AAAA;AACA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAO,OAAO;;AAG1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAE;EAAAC,EAAA;EACzB;EACA;EACA;EACA;EACA,MAAM,CAACC,GAAG,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMS,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;;EAE3C;EACA;EACA,eAAeC,SAASA,CAAA,EAAE;IAEtB;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,GAAGN,EAAE,CAAC;IACtE;IACA,MAAMO,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACrC;IACA;IACA;IACA;IACA;IACA;;IAEAC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAACC,MAAM,CAAC;IAEhCf,SAAS,CAACU,OAAO,CAACI,IAAI,CAACC,MAAM,CAAC;IAC9Bb,QAAQ,CAAEc,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC;EAC1B;;EAEA;EACAvB,SAAS,CAAC,MAAM;IACZc,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIX,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MAAAqB,QAAA,EAAKlB;IAAG;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEdzB,OAAA;MAAQ0B,OAAO,EAAEf,SAAU;MAAAU,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE/CzB,OAAA,CAAC2B,OAAO;MAACtB,KAAK,EAAEA;IAAM;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;;EAGV;EACA;EACA,SAASE,OAAOA,CAACC,KAAK,EAAC;IACnB,oBACI5B,OAAA;MAAAqB,QAAA,GAAG,gBAAc,eAAArB,OAAA;QAAAqB,QAAA,EAASO,KAAK,CAACvB;MAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,sBAAkB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAE7E;AACJ;AAACvB,EAAA,CApDuBD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}