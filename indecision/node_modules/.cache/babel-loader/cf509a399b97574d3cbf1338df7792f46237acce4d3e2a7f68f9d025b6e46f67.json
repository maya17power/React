{"ast":null,"code":"// console.log('app running es6 arrow functions 2');\n// arguments object - NO LONGER BOUND WITH ARROW FUNCTION\n//ES5 function scaffold\n// const add = function (a,b){\n//     console.log(arguments);\n//     return a + b;\n// }\n// console.log(add(55,1, 1001));\n\n//ES6 function scaffold\n//no access \"arguments\" object\n// const add2 = (a,b) => a + b;\n// console.log(add2(50,50));\n\n//'this' keyword - NO LONGER BOUND WITH ARROW FUNCTIONS\n// const user = {\n//     name: \"Gee\",\n//     cities: ['sf', 'la', 'nrg'],\n//     printPlacesLived: function(){\n//         // console.log(this.name);\n//         // console.log(this.cities);\n\n//         // nested functions no longer support 'this' keyword in ES6\n//         // this.cities.forEach(function(i){\n//         //     console.log(this.name + \" has lived in \" + i);\n//         // });\n\n//         //nested ES6 Arrow functions support 'this' keyword.\n//         this.cities.forEach((i)=>{\n//             console.log(this.name + ' has lived in ' + i);\n//         });\n//     }\n// }\n\n//ES6 proper methods, remove colon and 'function' keyword text all together.\n// const user2 = {\n//     name: \"Gee\",\n//     cities: ['sf', 'la', 'nrg'],\n//     printPlacesLived(){\n//         // console.log(this.name);\n//         // console.log(this.cities);\n\n//         // nested functions no longer support 'this' keyword in ES6\n//         // this.cities.forEach(function(i){\n//         //     console.log(this.name + \" has lived in \" + i);\n//         // });\n\n//         //nested ES6 Arrow functions support 'this' keyword.\n//         //example forEach() method.\n//         // this.cities.forEach((i)=>{\n//         //     console.log(this.name + ' has lived in ' + i);\n//         // });\n\n//         //example Map() method.\n//         // returns new array and keeps existing array as is\n//         // const cityLocations = this.cities.map((i)=>{\n//         //     return this.name + ' has lived in ' + i;\n//         // });\n//         // return cityLocations;\n//         //slim version below:\n//         return this.cities.map((i)=> this.name + ' has lived in ' + i);\n//     }\n// }\n// console.log(user2.printPlacesLived());\n\n//challenge area:\n// const multiplier = {\n//     number: [1,2,3],\n//     multiplyBy:(n) => {\n//         return this.number.map((i) => i * n)\n//     }\n// };\n\n// const number = [1,2,3];\nconst number = {\n  numbers: [1, 2, 3],\n  multiplyBy: n => {\n    return numbers.map(i => i * n);\n  }\n};\nconsole.log(number.multiplyBy(2));\nexport default function App() {}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["number","numbers","multiplyBy","n","map","i","console","log","App","_c","$RefreshReg$"],"sources":["/Users/wildstyle/Documents/Dev/React/indecision/src/playground/es6-arrow-function2.js"],"sourcesContent":["// console.log('app running es6 arrow functions 2');\n// arguments object - NO LONGER BOUND WITH ARROW FUNCTION\n//ES5 function scaffold\n// const add = function (a,b){\n//     console.log(arguments);\n//     return a + b;\n// }\n// console.log(add(55,1, 1001));\n\n//ES6 function scaffold\n//no access \"arguments\" object\n// const add2 = (a,b) => a + b;\n// console.log(add2(50,50));\n\n//'this' keyword - NO LONGER BOUND WITH ARROW FUNCTIONS\n// const user = {\n//     name: \"Gee\",\n//     cities: ['sf', 'la', 'nrg'],\n//     printPlacesLived: function(){\n//         // console.log(this.name);\n//         // console.log(this.cities);\n\n//         // nested functions no longer support 'this' keyword in ES6\n//         // this.cities.forEach(function(i){\n//         //     console.log(this.name + \" has lived in \" + i);\n//         // });\n\n//         //nested ES6 Arrow functions support 'this' keyword.\n//         this.cities.forEach((i)=>{\n//             console.log(this.name + ' has lived in ' + i);\n//         });\n//     }\n// }\n\n//ES6 proper methods, remove colon and 'function' keyword text all together.\n// const user2 = {\n//     name: \"Gee\",\n//     cities: ['sf', 'la', 'nrg'],\n//     printPlacesLived(){\n//         // console.log(this.name);\n//         // console.log(this.cities);\n\n//         // nested functions no longer support 'this' keyword in ES6\n//         // this.cities.forEach(function(i){\n//         //     console.log(this.name + \" has lived in \" + i);\n//         // });\n\n//         //nested ES6 Arrow functions support 'this' keyword.\n//         //example forEach() method.\n//         // this.cities.forEach((i)=>{\n//         //     console.log(this.name + ' has lived in ' + i);\n//         // });\n\n//         //example Map() method.\n//         // returns new array and keeps existing array as is\n//         // const cityLocations = this.cities.map((i)=>{\n//         //     return this.name + ' has lived in ' + i;\n//         // });\n//         // return cityLocations;\n//         //slim version below:\n//         return this.cities.map((i)=> this.name + ' has lived in ' + i);\n//     }\n// }\n// console.log(user2.printPlacesLived());\n\n\n//challenge area:\n// const multiplier = {\n//     number: [1,2,3],\n//     multiplyBy:(n) => {\n//         return this.number.map((i) => i * n)\n//     }\n// };\n\n// const number = [1,2,3];\nconst number = {\n    numbers: [1,2,3],\n    multiplyBy: (n)=>{\n        return numbers.map((i)=> i * n)\n    }\n}\n\nconsole.log(number.multiplyBy(2));\n\n\n\n\nexport default function App(){}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,MAAM,GAAG;EACXC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAChBC,UAAU,EAAGC,CAAC,IAAG;IACb,OAAOF,OAAO,CAACG,GAAG,CAAEC,CAAC,IAAIA,CAAC,GAAGF,CAAC,CAAC;EACnC;AACJ,CAAC;AAEDG,OAAO,CAACC,GAAG,CAACP,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC;AAKjC,eAAe,SAASM,GAAGA,CAAA,EAAE,CAAC;AAACC,EAAA,GAAPD,GAAG;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}