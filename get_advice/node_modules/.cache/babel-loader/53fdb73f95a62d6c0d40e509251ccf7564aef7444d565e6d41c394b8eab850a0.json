{"ast":null,"code":"var _jsxFileName = \"/Users/wildstyle/Documents/Dev/REACT/get_advise/src/App.js\",\n  _s = $RefreshSig$();\n//useState required when updating element inner values\n//useEffect required when to load default values into element on load.\nimport { useEffect, useState } from \"react\";\n\n//App component contains main function which generates html elemets programatically\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  //create a new state to update dom element inner values\n  //perameter \"adv\" is the value to be placed in dom element as value\n  //perameter \"setAdvice\" is what wraps the data to be used by \"adv\" perameter\n  //useState perameter is the default string\n  const [adv, setAdvice] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const rn = Math.floor(Math.random() * 100);\n\n  //async function fetches api data in json format.\n  //async requires a function to return a promise -( Producing Code & Consuming Code)\n  async function getAdvice() {\n    //await requires a function to return a promise (Producing Code)\n    const response = await fetch(\"https://api.adviceslip.com/advice/\" + rn);\n    //await requires a function to return a promise (Consuming Code)\n    const rawData = await response.json();\n    //example filter: rawData.slip[\"advice\"]\n    //example filter: rawData['slip']['advice']\n    //example filter: rawData.slip.advice\n    //example filter: rawData.slip.id\n    //example filter: rawData['slip']['id']\n    //example filter: rawData.slip[\"id\"]\n\n    console.log(\"Random Number:\" + rn + \", Slip_ID: \" + rawData.slip.id);\n    setAdvice(rawData.slip.advice);\n    setCount(c => c + 1);\n  }\n\n  //assign function into useEffect method with second argument as empty array.\n  useEffect(() => {\n    getAdvice();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: adv\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getAdvice,\n      children: \"Get Advise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      count: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n\n  //Message component handles messages to end user.\n  //props perameter is collected to utilize useState within function.\n  function Message(props) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You have read \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: props.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 23\n      }, this), \" pieces of advice.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(App, \"TNV0k/I4aSODbCcPf2HdcxemoO0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","adv","setAdvice","count","setCount","rn","Math","floor","random","getAdvice","response","fetch","rawData","json","console","log","slip","id","advice","c","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Message","props","_c","$RefreshReg$"],"sources":["/Users/wildstyle/Documents/Dev/REACT/get_advise/src/App.js"],"sourcesContent":["//useState required when updating element inner values\n//useEffect required when to load default values into element on load.\nimport { useEffect, useState } from \"react\";\n\n//App component contains main function which generates html elemets programatically\nexport default function App() {\n  //create a new state to update dom element inner values\n  //perameter \"adv\" is the value to be placed in dom element as value\n  //perameter \"setAdvice\" is what wraps the data to be used by \"adv\" perameter\n  //useState perameter is the default string\n  const [adv, setAdvice] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const rn = Math.floor(Math.random() * 100);\n\n  //async function fetches api data in json format.\n  //async requires a function to return a promise -( Producing Code & Consuming Code)\n  async function getAdvice() {\n    //await requires a function to return a promise (Producing Code)\n    const response = await fetch(\"https://api.adviceslip.com/advice/\" + rn);\n    //await requires a function to return a promise (Consuming Code)\n    const rawData = await response.json();\n    //example filter: rawData.slip[\"advice\"]\n    //example filter: rawData['slip']['advice']\n    //example filter: rawData.slip.advice\n    //example filter: rawData.slip.id\n    //example filter: rawData['slip']['id']\n    //example filter: rawData.slip[\"id\"]\n\n    console.log(\"Random Number:\" + rn + \", Slip_ID: \" + rawData.slip.id);\n\n    setAdvice(rawData.slip.advice);\n    setCount((c) => c + 1);\n  }\n\n  //assign function into useEffect method with second argument as empty array.\n  useEffect(() => {\n    getAdvice();\n  }, []);\n\n  return (\n    <div>\n      <h1>{adv}</h1>\n      {/* add onClick perameter to button element */}\n      <button onClick={getAdvice}>Get Advise</button>\n      {/*add 'Message' component tag function name with prop which is variable count value. */}\n      <Message count={count} />\n    </div>\n  );\n\n  //Message component handles messages to end user.\n  //props perameter is collected to utilize useState within function.\n  function Message(props) {\n    return (\n      <p>\n        You have read <strong>{props.count}</strong> pieces of advice.\n      </p>\n    );\n  }\n}\n"],"mappings":";;AAAA;AACA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA;EACA;EACA;EACA,MAAM,CAACC,GAAG,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMS,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;;EAE1C;EACA;EACA,eAAeC,SAASA,CAAA,EAAG;IACzB;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,GAAGN,EAAE,CAAC;IACvE;IACA,MAAMO,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACrC;IACA;IACA;IACA;IACA;IACA;;IAEAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGV,EAAE,GAAG,aAAa,GAAGO,OAAO,CAACI,IAAI,CAACC,EAAE,CAAC;IAEpEf,SAAS,CAACU,OAAO,CAACI,IAAI,CAACE,MAAM,CAAC;IAC9Bd,QAAQ,CAAEe,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC;EACxB;;EAEA;EACAxB,SAAS,CAAC,MAAM;IACdc,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAKnB;IAAG;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEd1B,OAAA;MAAQ2B,OAAO,EAAEhB,SAAU;MAAAW,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE/C1B,OAAA,CAAC4B,OAAO;MAACvB,KAAK,EAAEA;IAAM;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;;EAGR;EACA;EACA,SAASE,OAAOA,CAACC,KAAK,EAAE;IACtB,oBACE7B,OAAA;MAAAsB,QAAA,GAAG,gBACa,eAAAtB,OAAA;QAAAsB,QAAA,EAASO,KAAK,CAACxB;MAAK;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,sBAC9C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAER;AACF;AAACxB,EAAA,CArDuBD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}